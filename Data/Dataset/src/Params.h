#ifndef PARAMS_H
#define PARAMS_H

#include "Polygon.h"
#include "Block.h"
#include <math.h>
#include <time.h>
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <set>
#include <iterator>
#include <random>
#include <climits>
#include "WGS84toCartesian.hpp"
#include "nlohmann/json.hpp"
using json = nlohmann::json;
using namespace std;

class Params
{
public:
	/* INPUT VARIABLES AND PARAMETERS OF THE GENERATOR */
	string dataName;			// Name of the dataset
	string instanceName;		// Name of the input file representing the original data (without the geojson extension)
	string outputName;			// Path to the output file representing a complete districting dataset (without the geojson extension -- will also be used for temporary LKH data)

	int sizeTrainingSet;        // Number of scenarios generated by Block
	int seed;					// Random seed
	
	/* INPUT DATA */
	mt19937 generator;							 // Random number generator
	Point referencePoint = {0, 0};				 // Point representing the reference position in XY coordinates (always 0,0 per definition)

	map<int,double> probaCustomerDemandPerTargetSizeDistrict; // Probability of a customer to have a demand per target size of district
	
	array<double, 2> referenceLongLat;			 // Reference longitude and latitude to calculate the Cartesian coordinates (for example, Birminham is {-1.902663, 52.487029})
	set<array<double, 2>> allPointsLongLat;		 // All points in the considered instance
	vector<Block> blocks;						 // Information on the blocks

	double minX = 1.e30;						 // Minimum X coordinate of the vertices of the entire dataset
	double maxX = -1.e30;						 // Maximum X coordinate of the vertices of the entire dataset
	double minY = 1.e30;						 // Minimum Y coordinate of the vertices of the entire dataset
	double maxY = -1.e30;						 // Maximum Y coordinate of the vertices of the entire dataset

	int totalInhabitants = 0;					 // Total number of inhabitants in the blocks
	int minInhabitants = INT_MAX;				 // Minimum number of inhabitants in the blocks

	int maxInhabitants = 0;						 // Maximum number of inhabitants in the blocks
	double totalArea = 0;						 // Total area of the blocks
	double minArea = 1.e30;						 // Minimal area of a block
	double maxArea = 0.;						 // Maximum area of a block

	
	/* TIME MEASUREMENT */
	clock_t startTime; // Time when the generation of the training examples started
	clock_t endTime;   // Time when the generation of the training examples started

	/* FUNCTIONS TO READ FILE AND SET UP THE DATA STRUCTURES */
	bool isBlockToRemove(string zone_id); // Blocks which have been flagged to be ignored in the datasets (to avoid connectivity issues)
	void readBlocksJSON();
	void computeBlockDistances();
	
	void exportJSONFile(); 				// Exporting the instance and data in GeoJSON format (for easy I/O and display)
	void exportBlockScenarios();        // Export instance data, mainly scenarios for each block

	Params(int argc, char *argv[]);
};

#endif
